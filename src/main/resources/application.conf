akka {
  loglevel = DEBUG
  log-dead-letters-during-shutdown = off
  log-dead-letters = off
  actor {
    provider = cluster
    log-config-on-start = on
    allow-java-serialization = on
    enable-additional-serialization-bindings = on
    serializers {
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
    }
    serialization-bindings {
      "com.example.CborSerializable" = jackson-cbor
    }
  }
  extensions = [akka.persistence.Persistence]
  remote.artery {
    canonical.port = 0
    canonical.hostname = "127.0.0.1"
  }
  persistence {
    journal {
      plugin = "akka.persistence.cassandra.journal"
      auto-start-journals = ["akka.persistence.cassandra.journal"]
    }
    snapshot-store {
      plugin = "akka.persistence.cassandra.snapshot"
    }
  }
  cluster {
    seed-nodes = [
      "akka://ForClustering@127.0.0.1:2553",
      "akka://ForClustering@127.0.0.1:2554",
      "akka://ForClustering@127.0.0.1:2555",
    ]
    replication-nodes = [
        ForCluster_01,
        ForCluster_02,
        ForCluster_03,
    ]
    min-nr-of-members = 1
    sharding {
      number-of-shards = 100
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }
}
for-clustering {
  routes.ask-timeout = 60s
}
datastax-java-driver{
  advanced {
    reconnect-on-init = true
    connection.warn-on-init-error = false
    auth-provider{
      class = PlainTextAuthProvider
      username = ""
      password = ""
    }
  }
  basic {
    contact-points = [""]
    load-balancing-policy.local-datacenter = ""
  }
  profiles {
    akka-persistence-cassandra-profile {
        basic.request.consistency = QUORUM
    }
  }
}
